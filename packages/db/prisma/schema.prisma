generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Plan {
  STARTER
  PRO
  ENTERPRISE
}

enum StaffRole {
  MASTER
  ADMIN
  RECEPTION
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  NO_SHOW
  CANCELED
}

enum TranslationSource {
  AUTO
  MANUAL
  LLM
}

enum MessageChannel {
  TELEGRAM
  EMAIL
  WEB_CHAT
  WHATSAPP
}

enum MessageDirection {
  IN
  OUT
}

enum MessageStatus {
  SENT
  DELIVERED
  FAILED
}

// Main Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("OWNER")
  staff     Staff[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Salon {
  id                     String   @id @default(cuid())
  nip                    String   @unique
  slug                   String   @unique // TP-02: добавлено поле slug
  legalName              String?
  displayName            String
  phone                  String?
  email                  String?
  website                String?
  addressCountry         String?
  addressCity            String?
  addressStreet          String?
  postalCode             String?
  geoLat                 Float?
  geoLng                 Float?

  // Мультиязычность
  primaryLocale          String   @default("pl")
  supportedLocales       String[] @default(["pl"])
  publicDefaultLocale    String?
  autoTranslateEnabled   Boolean  @default(true)
  publicListingEnabled   Boolean  @default(false)

  // Категория / Теги
  category               String?
  tags                   String[]

  // Валюта и план
  baseCurrency           String   @default("PLN")
  plan                   Plan     @default(STARTER)
  trialEndsAt            DateTime?

  // Relations
  socialLinks            SalonSocialLinks?
  channels               SalonChannels? // TP-06: добавлено
  staff                  Staff[]
  clients                Client[]
  services               Service[]
  serviceTranslations    ServiceTranslation[]
  appointments           Appointment[]
  timeOff                TimeOff[]
  messages               MessageLog[]
  agentSkills            AgentSkill[]

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("salons")
}

model SalonSocialLinks {
  id          String @id @default(cuid())
  salonId     String @unique
  instagram   String?
  facebook    String?
  telegramBot String?
  whatsapp    String?

  salon       Salon  @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@map("salon_social_links")
}

// TP-06: Новая таблица для настроек каналов сообщений
model SalonChannels {
  id                    String @id @default(cuid())
  salonId               String @unique

  // Telegram
  telegramBotToken      String?
  telegramEnabled       Boolean @default(false)
  telegramWebhookUrl    String?

  // Email SMTP
  smtpHost              String?
  smtpPort              Int?
  smtpUser              String?
  smtpPassword          String? // зашифровано
  smtpFrom              String?
  emailEnabled          Boolean @default(false)

  // Web-chat
  webChatEnabled        Boolean @default(true)
  webChatDomain         String?
  
  // WhatsApp (для Pro+ планов)
  whatsappToken         String?
  whatsappPhoneId       String?
  whatsappEnabled       Boolean @default(false)

  // Rate limiting
  rateLimitPerMinute    Int @default(10)

  salon                 Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([salonId])
  @@map("salon_channels")
}

model Staff {
  id                     String    @id @default(cuid())
  salonId                String
  userId                 String?
  name                   String
  role                   StaffRole @default(MASTER)
  spokenLocales          String[]  @default([])
  preferredLocaleForUi   String?
  color                  String?
  active                 Boolean   @default(true)

  salon                  Salon        @relation(fields: [salonId], references: [id], onDelete: Cascade)
  user                   User?        @relation(fields: [userId], references: [id])
  appointments           Appointment[]
  timeOff                TimeOff[]
  messages               MessageLog[]

  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@index([salonId])
  @@map("staff")
}

model Client {
  id                String   @id @default(cuid())
  salonId           String
  name              String
  phone             String?
  email             String?
  preferredLocale   String?
  alternateLocales  String[] @default([])
  preferredChannels Json?
  tags              String[] @default([])
  birthday          DateTime?
  firstVisitAt      DateTime?
  lastVisitAt       DateTime?

  // TP-06: Добавлены поля для связи с внешними системами
  telegramChatId    String? // для связи с Telegram
  webChatSessionId  String? // для веб-чат сессий

  salon             Salon       @relation(fields: [salonId], references: [id], onDelete: Cascade)
  appointments      Appointment[]
  messages          MessageLog[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([salonId])
  @@index([salonId, phone])
  @@index([salonId, email])
  @@index([salonId, telegramChatId]) // TP-06
  @@map("clients")
}

model Service {
  id              String   @id @default(cuid())
  salonId         String
  code            String
  baseName        String
  baseDescription String?
  durationMin     Int
  priceCurrency   String   @default("PLN")
  priceAmount     Decimal  @db.Decimal(10,2)
  category        String?
  active          Boolean  @default(true)

  salon           Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  translations    ServiceTranslation[]
  appointmentItems AppointmentService[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([salonId])
  @@unique([salonId, code])
  @@map("services")
}

model ServiceTranslation {
  id          String  @id @default(cuid())
  salonId     String
  serviceId   String
  locale      String
  name        String
  description String?
  source      TranslationSource @default(AUTO)
  approved    Boolean @default(false)
  updatedAt   DateTime @updatedAt

  service     Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  salon       Salon   @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@index([salonId])
  @@unique([serviceId, locale])
  @@map("service_translations")
}

model Appointment {
  id         String   @id @default(cuid())
  salonId    String
  clientId   String
  staffId    String?
  startAt    DateTime
  endAt      DateTime
  status     AppointmentStatus @default(PENDING)
  notes      String?

  salon      Salon   @relation(fields: [salonId], references: [id], onDelete: Cascade)
  client     Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  staff      Staff?  @relation(fields: [staffId], references: [id], onDelete: SetNull)
  services   AppointmentService[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([salonId, startAt])
  @@index([salonId, staffId, startAt])
  @@map("appointments")
}

model AppointmentService {
  id                String  @id @default(cuid())
  appointmentId     String
  serviceId         String
  priceOverride     Decimal? @db.Decimal(10,2)
  durationOverride  Int?

  appointment       Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service           Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([appointmentId])
  @@map("appointment_services")
}

model TimeOff {
  id        String @id @default(cuid())
  salonId   String
  staffId   String?
  startAt   DateTime
  endAt     DateTime
  reason    String?

  salon     Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)
  staff     Staff? @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([salonId])
  @@map("time_off")
}

// TP-06: Расширена таблица message_log
model MessageLog {
  id             String @id @default(cuid())
  salonId        String
  clientId       String?
  staffId        String?
  channel        MessageChannel
  direction      MessageDirection
  sourceLocale   String?
  targetLocale   String?
  rawText        String?
  translatedText String?
  templateCode   String?
  status         MessageStatus @default(SENT)

  // TP-06: Добавлены метаданные
  meta           Json? // MessageMeta - chatId, messageId, sessionId, etc.
  errorMessage   String?
  deliveredAt    DateTime?
  readAt         DateTime?

  createdAt      DateTime @default(now())

  salon          Salon   @relation(fields: [salonId], references: [id], onDelete: Cascade)
  client         Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)
  staff          Staff?  @relation(fields: [staffId], references: [id], onDelete: SetNull)

  @@index([salonId, createdAt])
  @@index([salonId, channel, status]) // TP-06: для статистики
  @@map("message_log")
}

model AgentSkill {
  id        String @id @default(cuid())
  salonId   String
  skillCode String
  enabled   Boolean @default(true)
  config    Json?
  updatedAt DateTime @updatedAt

  salon     Salon @relation(fields: [salonId], references: [id], onDelete: Cascade)

  @@unique([salonId, skillCode])
  @@map("agent_skills")
}
